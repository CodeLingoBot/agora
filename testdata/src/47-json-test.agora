fmt := import("fmt")
conv := import("conv")
json := import("./46-json")
time := import("time")

/*
fmt.Println("STRINGIFY TESTS:")
fmt.Println("----------------")
fmt.Println("test:", json.Stringify("test"))
fmt.Println("12:", json.Stringify(12))
fmt.Println("true:", json.Stringify(true))
fmt.Println("false:", json.Stringify(false))
fmt.Println("3.1415:", json.Stringify(3.1415))
fmt.Println("nil:", json.Stringify(nil))
fmt.Println("{a: 12}:", json.Stringify({a: 12}))
fmt.Println("{a: 12, b: true, c: string, d: false, e: 1.12}:", json.Stringify({a: 12, b: true, c: "string", d: false, e: 1.12}))
fmt.Println("{a: func, b: obj}:", json.Stringify({a: func(){}, b: {c: 12, d: "ok"}, e: "right"}))
fmt.Println(`with " quotes ":`, json.Stringify(`with " quotes "`))
fmt.Println("time.Now:", json.Stringify(time.Now()))
fmt.Println("{a: time.Now}:", json.Stringify({a: time.Now()}))

err := recover(func() {
	json.Stringify(func() {})
})
fmt.Println("func err:", err)

fmt.Println()

fmt.Println("PARSE TESTS:")
fmt.Println("------------")
*/
cases := {}
cases[0] = `"test"`
cases[1] =`"12"`
cases[2] = `"true"`

l := len(cases)
fmt.Println(l)
for i := 0; i < l; i++ {
	fmt.Println(i)
	k := cases[i]
	fmt.Println(i)
	ret := json.Parse(cases[i])
	fmt.Println(i, k, ":", ret, "(" + conv.Type(ret) + ")")
}
