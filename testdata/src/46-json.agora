conv := import("conv")
strings := import("strings")

ob := {}

func ignored(key, val) {
	return conv.Type(key) == "func" || conv.Type(val) == "func"
}

func stringify(val, quote) {
	type := conv.Type(val)
	if type == "string" || ((type == "number" || type == "bool") && quote) {
		// TODO : more robust escape of quotes in the string...
		str := strings.Replace(val, `"`, `\"`)
		return `"` + str + `"`
	} else if type == "number" || type == "bool" {
		return conv.String(val)
	} else if type == "func" {
		panic("cannot marshal a func to JSON")
	} else if type != "object" {
		return ""
	} else if val.__string {
		// An object, but it "knows" how to stringify itself
		return stringify(conv.String(val), true)
	}

	// Finally, the object the "hard" way
	ks := keys(val)
	l := len(ks)
	obj := "{"
	for i := 0; i < l; i++ {
		key := ks[i]
		v := val[ks[i]]
		if !ignored(key, v) {
			if obj != "{" {
				obj += ", "
			}
			obj = strings.Concat(obj, stringify(key, true), ":", stringify(v, false))
		}
	}
	obj += "}"
	return obj
}

ob.Stringify = func(src) {
	return stringify(src, true)
}

ob.Parse = func(src) {
	src = strings.Trim(src)
	parseObjFunc := nil // Required for parseValue to call parseObject before it is defined

	i := 0
	ch := strings.ByteAt(src, i)
	
	func advance(expect) {
		if expect != "" && ch != expect {
			panic("expected " + expect + ", got " + ch)
		}
		i++
		ch = strings.ByteAt(src, i)
	}
	
	func skipWhitespace() {
		for ch == " " || ch == "\n" || ch == "\t" || ch == "\r" {
			advance("")
		}
	}

	func parseValue(reqQuotes) {
		quoted := ch == `"`
		if reqQuotes || quoted {
			advance(`"`)
		}
		if !quoted && ch == "{" {
			// The value is an object, parse object
			return parseObjFunc()
		}
		val := ""
		onlyNum := true
		// TODO : Detect escaped quotes
		for (quoted && ch != `"`) || (!quoted && ch != "," && ch != "}" && ch != " " && ch != "]") {
			val += ch
			if onlyNum {
				// Very basic check, will the try to convert value to number and get
				// an error if it doesn't work.
				if strings.Trim(ch, "-+0123456789.eE") != "" {
					onlyNum = false
				}
			}
			advance("")
			if ch == "" {
				break
			}
		}
		if quoted {
			advance(`"`)
		}
		// Type conversion
		retVal := val
		if onlyNum {
			// If there is an error converting, retVal will remain unchanged
			recover(func() {
				retVal = conv.Number(val)
			})
		} else if val == "true" || val == "false" {
			retVal = conv.Bool(val)
		}
		return retVal
	}
	
	func parseObject() {
		ob := {}
		j := 0
		advance("{")
		skipWhitespace()
		for ch != "}" {
			if j > 0 {
				advance(",")
				skipWhitespace()
			}
			key := parseValue(true)
			skipWhitespace()
			advance(":")
			skipWhitespace()
			val := parseValue()
			ob[key] = val
			j++
			skipWhitespace()
		}
		advance("}")
		return ob
	}

	func parseArray() {
		a := {}
		j := 0
		advance("[")
		skipWhitespace()
		for ch != "]" {
			if j > 0 {
				advance(",")
				skipWhitespace()
			}
			val := parseValue()
			a[j] = val
			j++
			skipWhitespace()
		}
		advance("]")
		return a
	}
	
	parseObjFunc = parseObject
	o := nil
	skipWhitespace()
	if ch == "{" {
		o = parseObject()
	} else if ch == "[" {
		o = parseArray()
	} else {
		o = parseValue(true)
	}
	skipWhitespace()
	if ch != "" {
		panic("expected end of string, got " + ch)
	}
	return o
}

return ob
