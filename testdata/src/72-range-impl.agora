strings := nil // lazy-load the strings module, so that it is not required

func rangeNumber(n0, n1, n2) {
	return func() {
		if n1 == nil {
			// n0 is the max, so move it to n1 and set n0 to start at 0
			n1 = n0
			n0 = 0
		}
		n2 = n2 || 1 // Increment by 1 by default
		if n2 >= 0 {
			for i := n0; i < n1; i += n2 {
				yield i
			}
		} else {
			for i = n0; i > n1; i += n2 {
				yield i
			}
		}
		return nil
	}
}

func rangeString(s0, s1, n2) {
	
}

func Range(a0, a1, a2) {
	// Determine the type of range required, based on the first argument's type
	t := type(a0)
	if t == "number" {
		return rangeNumber(a0, a1, a2)
	} else if t == "string" {
		//return rangeString(a0, a1, a2)
	} else if t == "object" {
		//return rangeObject(a0)
	} else if t == "func" {
		reset(a0)
		return a0
	}
	panic("range not allowed over " + t)
}

return Range
