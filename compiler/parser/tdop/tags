!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
advance	parser.go	/^func advance(id string) *symbol {$/;"	f
arity	parser.go	/^type arity int$/;"	t
assignment	parser.go	/^func assignment(id string) *symbol {$/;"	f
block	parser.go	/^func block() interface{} {$/;"	f
clone	parser.go	/^func clone(ori *symbol) *symbol {$/;"	f
constant	parser.go	/^func constant(id string, v interface{}) *symbol {$/;"	f
define	parser.go	/^func (s *scope) define(n *symbol) *symbol {$/;"	f
define	parser.go	/^func define(id string) *symbol {$/;"	f
error	parser.go	/^func error(msg string) {$/;"	f
expression	parser.go	/^func expression(rbp int) *symbol {$/;"	f
find	parser.go	/^func (s *scope) find(id string) *symbol {$/;"	f
infix	parser.go	/^func infix(id string, bp int, ledfn func(*symbol, *symbol) *symbol) *symbol {$/;"	f
infixr	parser.go	/^func infixr(id string, bp int, ledfn func(*symbol, *symbol) *symbol) *symbol {$/;"	f
init	parser.go	/^func init() {$/;"	f
itself	parser.go	/^func itself(s *symbol) *symbol {$/;"	f
led	parser.go	/^func (s *symbol) led(left *symbol) *symbol {$/;"	f
makeSymbol	parser.go	/^func makeSymbol(id string, bp int) *symbol {$/;"	f
make_parse	parse.js	/^var make_parse = function () {$/;"	f
make_parse.advance	parse.js	/^    var advance = function (id) {$/;"	f
make_parse.assignment	parse.js	/^    var assignment = function (id) {$/;"	f
make_parse.block	parse.js	/^    var block = function () {$/;"	f
make_parse.constant	parse.js	/^    var constant = function (s, v) {$/;"	f
make_parse.expression	parse.js	/^    var expression = function (rbp) {$/;"	f
make_parse.infix	parse.js	/^    var infix = function (id, bp, led) {$/;"	f
make_parse.infixr	parse.js	/^    var infixr = function (id, bp, led) {$/;"	f
make_parse.itself	parse.js	/^    var itself = function () {$/;"	f
make_parse.new_scope	parse.js	/^    var new_scope = function () {$/;"	f
make_parse.original_scope.define	parse.js	/^        define: function (n) {$/;"	m
make_parse.original_symbol.led	parse.js	/^        led: function (left) {$/;"	m
make_parse.original_symbol.nud	parse.js	/^        nud: function () {$/;"	m
make_parse.prefix	parse.js	/^    var prefix = function (id, nud) {$/;"	f
make_parse.statement	parse.js	/^    var statement = function () {$/;"	f
make_parse.statements	parse.js	/^    var statements = function () {$/;"	f
make_parse.stmt	parse.js	/^    var stmt = function (s, f) {$/;"	f
make_parse.symbol	parse.js	/^    var symbol = function (id, bp) {$/;"	f
make_parse.x.nud	parse.js	/^        x.nud = function () {$/;"	c
newScope	parser.go	/^func newScope() *scope {$/;"	f
nud	parser.go	/^func (s *symbol) nud() *symbol {$/;"	f
original_scope.find	parse.js	/^        find: function (n) {$/;"	m
original_scope.pop	parse.js	/^        pop: function () {$/;"	m
original_scope.reserve	parse.js	/^        reserve: function (n) {$/;"	m
pop	parser.go	/^func (s *scope) pop() {$/;"	f
prefix	parser.go	/^func prefix(id string, nudfn func(*symbol) *symbol) *symbol {$/;"	f
reserve	parser.go	/^func (s *scope) reserve(n *symbol) {$/;"	f
scope	parser.go	/^type scope struct {$/;"	t
statement	parser.go	/^func statement() interface{} {$/;"	f
statements	parser.go	/^func statements() []*symbol {$/;"	f
std	parser.go	/^func (s *symbol) std() interface{} {$/;"	f
stmt	parser.go	/^func stmt(id string, stdfn func(*symbol) interface{}) *symbol {$/;"	f
symbol	parse.js	/^    symbol("this").nud = function () {$/;"	c
symbol	parser.go	/^type symbol struct {$/;"	t
