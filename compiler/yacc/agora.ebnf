float = . // http://golang.org/ref/spec#float_lit
identifier = . // ASCII letters, digits, "_". No front digit.
integer = . // http://golang.org/ref/spec#int_lit
str = . // http://golang.org/ref/spec#string_lit
boolean = "true" | "false" .

unary_op = "!" | "-" .
binary_op = "+" | "-" .

Module = { Statement ";" } .
Statement = SimpleStmt .

SimpleStmt = ExpressionStmt | IncDecStmt | Assignment | ShortVarDecl .
ExpressionStmt = Expression .
IncDecStmt = Expression ( "++" | "--" ) .
Assignment = ExpressionList "=" ExpressionList .
ShortVarDecl = IdentifierList ":=" ExpressionList .

IdentifierList = identifier { "," identifier } .
ExpressionList = Expression { "," Expression } .
Expression = UnaryExpr | Expression binary_op UnaryExpr .
UnaryExpr = PrimaryExpr | unary_op UnaryExpr .
PrimaryExpr = Operand |
							PrimaryExpr Selector |
							PrimaryExpr IndexSelector |
							PrimaryExpr Call .
Operand = Literal | OperandName | "(" Expression ")" .

Literal = BasicLit | CompositeLit | FunctionLit .
BasicLit = integer | float | str | boolean .
CompositeLit = LiteralValue .
LiteralValue = "{" [ ElementList [ "," ] ] "}" .
ElementList = Element { "," Element } .
Element = Key ":" Value . // TODO : Eventually make key optional, implicit array index?
Key = FieldName | ElementIndex .
FieldName = identifier .
ElementIndex = Expression .
Value = Expression | LiteralValue .
FunctionLit = "func" Function .
Function = Signature FunctionBody .
FunctionBody = Block .
Signature = Parameters .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
ParameterList = Parameter { "," Parameter } .
Parameter = identifier .

OperandName = identifier | QualifiedIdent .
QualifiedIdent = identifier "." identifier .

Selector = "." identifier .
IndexSelector = "[" Expression "]" .
Call = "(" [ ArgumentList [ "," ] ] ")" .
ArgumentList = ExpressionList .
Block = "{" { Statement ";" } "}" .
