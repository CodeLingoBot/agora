
//line agora.y:2

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-10-28 21:55:18.384979255 -0400 EDT
//
//  $ ebnf2y -start=Module -o agora.y compiler/agora.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name
import __yyfmt__ "fmt"
//line agora.y:15
		
//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)


//line agora.y:28
type yySymType struct {
	yys int
	item interface{} //TODO insert real field(s)
}

const BINARY_OP = 57346
const BOOLEAN = 57347
const FLOAT = 57348
const IDENTIFIER = 57349
const INTEGER = 57350
const STR = 57351
const UNARY_OP = 57352
const TOK1 = 57353
const TOK2 = 57354
const TOK3 = 57355
const FUNC = 57356

var yyToknames = []string{
	"BINARY_OP",
	"BOOLEAN",
	"FLOAT",
	"IDENTIFIER",
	"INTEGER",
	"STR",
	"UNARY_OP",
	"TOK1",
	"TOK2",
	"TOK3",
	"FUNC",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line agora.y:549


//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	Assignment interface{}
	BasicLit interface{}
	Block interface{}
	Block1 interface{}
	Call interface{}
	Call1 interface{}
	Call11 interface{}
	CompositeLit interface{}
	Element interface{}
	ElementIndex interface{}
	ElementList interface{}
	ElementList1 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	ExpressionStmt interface{}
	FieldName interface{}
	Function interface{}
	FunctionBody interface{}
	FunctionLit interface{}
	IdentifierList interface{}
	IdentifierList1 interface{}
	IncDecStmt interface{}
	IncDecStmt1 interface{}
	IndexSelector interface{}
	Key interface{}
	Literal interface{}
	LiteralValue interface{}
	LiteralValue1 interface{}
	LiteralValue11 interface{}
	Module interface{}
	Module1 interface{}
	Operand interface{}
	OperandName interface{}
	Parameter interface{}
	ParameterList interface{}
	ParameterList1 interface{}
	Parameters interface{}
	Parameters1 interface{}
	Parameters11 interface{}
	PrimaryExpr interface{}
	QualifiedIdent interface{}
	Selector interface{}
	ShortVarDecl interface{}
	Signature interface{}
	SimpleStmt interface{}
	Start interface{}
	Statement interface{}
	UnaryExpr interface{}
	Value interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 10,
	18, 26,
	-2, 24,
	-1, 14,
	11, 32,
	21, 32,
	-2, 54,
	-1, 61,
	22, 27,
	-2, 54,
}

const yyNprod = 83
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 138

var yyAct = []int{

	66, 81, 57, 4, 10, 29, 11, 13, 28, 26,
	14, 25, 27, 16, 41, 87, 105, 30, 33, 31,
	103, 50, 20, 99, 48, 28, 26, 61, 25, 27,
	16, 47, 62, 95, 30, 46, 31, 45, 90, 20,
	97, 63, 93, 85, 33, 65, 67, 71, 28, 26,
	49, 25, 27, 16, 74, 68, 64, 30, 91, 31,
	75, 54, 20, 107, 32, 88, 28, 26, 14, 25,
	27, 16, 83, 78, 38, 30, 33, 31, 39, 100,
	20, 82, 89, 70, 37, 36, 69, 33, 101, 1,
	5, 52, 9, 102, 42, 10, 24, 15, 104, 96,
	62, 79, 106, 53, 98, 80, 19, 108, 17, 3,
	2, 84, 55, 18, 58, 43, 35, 7, 40, 12,
	23, 76, 51, 59, 6, 34, 86, 56, 60, 22,
	92, 72, 44, 94, 77, 21, 8, 73,
}
var yyPact = []int{

	-1000, -1000, -1000, 61, 46, -1000, -1000, -1000, -1000, -1000,
	72, 59, 67, -1000, -11, 12, 43, -1000, -1000, -1000,
	43, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42, 20, -1000, 43, 35, -1000, -1000, -1000, 43, 43,
	34, 79, -1000, -1000, -1000, 76, 43, 43, -1000, -11,
	40, -1000, 57, -1000, 74, 55, 22, -1000, -7, -1000,
	-1000, -11, 83, -1000, 43, -1000, 83, -1000, 75, -1000,
	-1000, 14, 38, 21, -1000, -1000, -1000, -1000, -1000, 13,
	19, -1000, -1000, -1000, -1000, -1000, 2, 43, 83, -1000,
	-1000, -1000, -1000, -1000, 3, -1000, -1000, -1000, -5, 20,
	-1000, 83, -1000, -1000, 45, 74, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 137, 136, 135, 134, 133, 132, 131, 130, 129,
	2, 128, 127, 126, 0, 6, 125, 124, 123, 122,
	121, 120, 119, 118, 117, 116, 115, 114, 113, 5,
	112, 111, 110, 109, 108, 106, 1, 105, 104, 103,
	101, 99, 97, 96, 94, 92, 91, 90, 89, 3,
	7, 79,
}
var yyR1 = []int{

	0, 1, 2, 3, 3, 3, 3, 4, 5, 5,
	6, 7, 7, 8, 8, 9, 10, 11, 12, 13,
	13, 14, 14, 15, 16, 16, 17, 18, 19, 20,
	21, 22, 23, 23, 24, 25, 25, 26, 27, 27,
	28, 28, 28, 29, 30, 30, 31, 31, 32, 33,
	33, 34, 34, 34, 35, 35, 36, 37, 38, 38,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 43,
	44, 45, 46, 47, 47, 47, 47, 48, 49, 50,
	50, 51, 51,
}
var yyR2 = []int{

	0, 1, 3, 1, 1, 1, 1, 3, 0, 3,
	3, 0, 2, 0, 1, 1, 3, 1, 2, 0,
	3, 1, 3, 2, 0, 3, 1, 1, 2, 1,
	2, 2, 0, 3, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 3, 0, 2, 0, 1, 1, 0,
	3, 1, 1, 3, 1, 1, 1, 2, 0, 3,
	3, 0, 2, 0, 1, 1, 2, 2, 2, 3,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1,
}
var yyChk = []int{

	-1000, -48, -32, -33, -49, -47, -17, -24, -2, -45,
	-14, -15, -22, -50, 7, -42, 10, -34, -28, -35,
	19, -3, -9, -21, -43, 8, 6, 9, 5, -29,
	14, 16, 18, 4, -16, -25, 13, 12, 15, 11,
	-23, 25, -44, -26, -6, 25, 23, 19, -50, 7,
	-14, -19, -46, -39, 19, -30, -12, -10, -27, -18,
	-11, 7, -14, -50, 21, -15, -14, -15, 21, 7,
	7, -14, -7, -1, -15, 20, -20, -4, 16, -40,
	-37, -36, 7, 17, -31, 21, -13, 22, -14, 7,
	24, 20, -8, 21, -5, 20, -41, 21, -38, 21,
	-51, -14, -29, 17, -49, 21, -10, 18, -36,
}
var yyDef = []int{

	49, -2, 77, 48, 0, 78, 73, 74, 75, 76,
	-2, 0, 0, 21, -2, 79, 0, 65, 51, 52,
	0, 40, 41, 42, 55, 3, 4, 5, 6, 15,
	0, 44, 50, 0, 23, 34, 35, 36, 0, 0,
	31, 0, 66, 67, 68, 0, 0, 11, 80, 54,
	0, 30, 0, 72, 61, 0, 46, 19, 0, 38,
	39, -2, 17, 22, 0, 2, 24, 71, 0, 69,
	70, 0, 0, 13, 1, 53, 28, 29, 8, 0,
	63, 58, 56, 43, 45, 47, 18, 0, 25, 33,
	37, 10, 12, 14, 0, 60, 62, 64, 57, 0,
	16, 81, 15, 7, 0, 0, 20, 9, 59,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	19, 20, 3, 3, 21, 3, 25, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 22, 18,
	3, 15, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 23, 3, 24, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 3, 17,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line agora.y:121
		{
			yyVAL.item = yyS[yypt-0].item //TODO 1
	}
	case 2:
		//line agora.y:127
		{
			yyVAL.item = []Assignment{yyS[yypt-2].item, "=", yyS[yypt-0].item} //TODO 2
	}
	case 3:
		//line agora.y:133
		{
			yyVAL.item = yyS[yypt-0].item //TODO 3
	}
	case 4:
		//line agora.y:137
		{
			yyVAL.item = yyS[yypt-0].item //TODO 4
	}
	case 5:
		//line agora.y:141
		{
			yyVAL.item = yyS[yypt-0].item //TODO 5
	}
	case 6:
		//line agora.y:145
		{
			yyVAL.item = yyS[yypt-0].item //TODO 6
	}
	case 7:
		//line agora.y:151
		{
			yyVAL.item = []Block{"{", yyS[yypt-1].item, "}"} //TODO 7
	}
	case 8:
		//line agora.y:157
		{
			yyVAL.item = []Block1(nil) //TODO 8
	}
	case 9:
		//line agora.y:161
		{
			yyVAL.item = append(yyS[yypt-2].item.([]Block1), yyS[yypt-1].item, ";") //TODO 9
	}
	case 10:
		//line agora.y:167
		{
			yyVAL.item = []Call{"(", yyS[yypt-1].item, ")"} //TODO 10
	}
	case 11:
		//line agora.y:173
		{
			yyVAL.item = nil //TODO 11
	}
	case 12:
		//line agora.y:177
		{
			yyVAL.item = []Call1{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 12
	}
	case 13:
		//line agora.y:183
		{
			yyVAL.item = nil //TODO 13
	}
	case 14:
		//line agora.y:187
		{
			yyVAL.item = "," //TODO 14
	}
	case 15:
		//line agora.y:193
		{
			yyVAL.item = yyS[yypt-0].item //TODO 15
	}
	case 16:
		//line agora.y:199
		{
			yyVAL.item = []Element{yyS[yypt-2].item, ":", yyS[yypt-0].item} //TODO 16
	}
	case 17:
		//line agora.y:205
		{
			yyVAL.item = yyS[yypt-0].item //TODO 17
	}
	case 18:
		//line agora.y:211
		{
			yyVAL.item = []ElementList{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 18
	}
	case 19:
		//line agora.y:217
		{
			yyVAL.item = []ElementList1(nil) //TODO 19
	}
	case 20:
		//line agora.y:221
		{
			yyVAL.item = append(yyS[yypt-2].item.([]ElementList1), ",", yyS[yypt-0].item) //TODO 20
	}
	case 21:
		//line agora.y:227
		{
			yyVAL.item = yyS[yypt-0].item //TODO 21
	}
	case 22:
		//line agora.y:231
		{
			yyVAL.item = []Expression{yyS[yypt-2].item, yyS[yypt-1].item, yyS[yypt-0].item} //TODO 22
	}
	case 23:
		//line agora.y:237
		{
			yyVAL.item = []ExpressionList{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 23
	}
	case 24:
		//line agora.y:243
		{
			yyVAL.item = []ExpressionList1(nil) //TODO 24
	}
	case 25:
		//line agora.y:247
		{
			yyVAL.item = append(yyS[yypt-2].item.([]ExpressionList1), ",", yyS[yypt-0].item) //TODO 25
	}
	case 26:
		//line agora.y:253
		{
			yyVAL.item = yyS[yypt-0].item //TODO 26
	}
	case 27:
		//line agora.y:259
		{
			yyVAL.item = yyS[yypt-0].item //TODO 27
	}
	case 28:
		//line agora.y:265
		{
			yyVAL.item = []Function{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 28
	}
	case 29:
		//line agora.y:271
		{
			yyVAL.item = yyS[yypt-0].item //TODO 29
	}
	case 30:
		//line agora.y:277
		{
			yyVAL.item = []FunctionLit{"func", yyS[yypt-0].item} //TODO 30
	}
	case 31:
		//line agora.y:283
		{
			yyVAL.item = []IdentifierList{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 31
	}
	case 32:
		//line agora.y:289
		{
			yyVAL.item = []IdentifierList1(nil) //TODO 32
	}
	case 33:
		//line agora.y:293
		{
			yyVAL.item = append(yyS[yypt-2].item.([]IdentifierList1), ",", yyS[yypt-0].item) //TODO 33
	}
	case 34:
		//line agora.y:299
		{
			yyVAL.item = []IncDecStmt{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 34
	}
	case 35:
		//line agora.y:305
		{
			yyVAL.item = "++" //TODO 35
	}
	case 36:
		//line agora.y:309
		{
			yyVAL.item = "--" //TODO 36
	}
	case 37:
		//line agora.y:315
		{
			yyVAL.item = []IndexSelector{"[", yyS[yypt-1].item, "]"} //TODO 37
	}
	case 38:
		//line agora.y:321
		{
			yyVAL.item = yyS[yypt-0].item //TODO 38
	}
	case 39:
		//line agora.y:325
		{
			yyVAL.item = yyS[yypt-0].item //TODO 39
	}
	case 40:
		//line agora.y:331
		{
			yyVAL.item = yyS[yypt-0].item //TODO 40
	}
	case 41:
		//line agora.y:335
		{
			yyVAL.item = yyS[yypt-0].item //TODO 41
	}
	case 42:
		//line agora.y:339
		{
			yyVAL.item = yyS[yypt-0].item //TODO 42
	}
	case 43:
		//line agora.y:345
		{
			yyVAL.item = []LiteralValue{"{", yyS[yypt-1].item, "}"} //TODO 43
	}
	case 44:
		//line agora.y:351
		{
			yyVAL.item = nil //TODO 44
	}
	case 45:
		//line agora.y:355
		{
			yyVAL.item = []LiteralValue1{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 45
	}
	case 46:
		//line agora.y:361
		{
			yyVAL.item = nil //TODO 46
	}
	case 47:
		//line agora.y:365
		{
			yyVAL.item = "," //TODO 47
	}
	case 48:
		//line agora.y:371
		{
			yyVAL.item = yyS[yypt-0].item //TODO 48
	}
	case 49:
		//line agora.y:377
		{
			yyVAL.item = []Module1(nil) //TODO 49
	}
	case 50:
		//line agora.y:381
		{
			yyVAL.item = append(yyS[yypt-2].item.([]Module1), yyS[yypt-1].item, ";") //TODO 50
	}
	case 51:
		//line agora.y:387
		{
			yyVAL.item = yyS[yypt-0].item //TODO 51
	}
	case 52:
		//line agora.y:391
		{
			yyVAL.item = yyS[yypt-0].item //TODO 52
	}
	case 53:
		//line agora.y:395
		{
			yyVAL.item = []Operand{"(", yyS[yypt-1].item, ")"} //TODO 53
	}
	case 54:
		//line agora.y:401
		{
			yyVAL.item = yyS[yypt-0].item //TODO 54
	}
	case 55:
		//line agora.y:405
		{
			yyVAL.item = yyS[yypt-0].item //TODO 55
	}
	case 56:
		//line agora.y:411
		{
			yyVAL.item = yyS[yypt-0].item //TODO 56
	}
	case 57:
		//line agora.y:417
		{
			yyVAL.item = []ParameterList{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 57
	}
	case 58:
		//line agora.y:423
		{
			yyVAL.item = []ParameterList1(nil) //TODO 58
	}
	case 59:
		//line agora.y:427
		{
			yyVAL.item = append(yyS[yypt-2].item.([]ParameterList1), ",", yyS[yypt-0].item) //TODO 59
	}
	case 60:
		//line agora.y:433
		{
			yyVAL.item = []Parameters{"(", yyS[yypt-1].item, ")"} //TODO 60
	}
	case 61:
		//line agora.y:439
		{
			yyVAL.item = nil //TODO 61
	}
	case 62:
		//line agora.y:443
		{
			yyVAL.item = []Parameters1{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 62
	}
	case 63:
		//line agora.y:449
		{
			yyVAL.item = nil //TODO 63
	}
	case 64:
		//line agora.y:453
		{
			yyVAL.item = "," //TODO 64
	}
	case 65:
		//line agora.y:459
		{
			yyVAL.item = yyS[yypt-0].item //TODO 65
	}
	case 66:
		//line agora.y:463
		{
			yyVAL.item = []PrimaryExpr{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 66
	}
	case 67:
		//line agora.y:467
		{
			yyVAL.item = []PrimaryExpr{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 67
	}
	case 68:
		//line agora.y:471
		{
			yyVAL.item = []PrimaryExpr{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 68
	}
	case 69:
		//line agora.y:477
		{
			yyVAL.item = []QualifiedIdent{yyS[yypt-2].item, ".", yyS[yypt-0].item} //TODO 69
	}
	case 70:
		//line agora.y:483
		{
			yyVAL.item = []Selector{".", yyS[yypt-0].item} //TODO 70
	}
	case 71:
		//line agora.y:489
		{
			yyVAL.item = []ShortVarDecl{yyS[yypt-2].item, ":=", yyS[yypt-0].item} //TODO 71
	}
	case 72:
		//line agora.y:495
		{
			yyVAL.item = yyS[yypt-0].item //TODO 72
	}
	case 73:
		//line agora.y:501
		{
			yyVAL.item = yyS[yypt-0].item //TODO 73
	}
	case 74:
		//line agora.y:505
		{
			yyVAL.item = yyS[yypt-0].item //TODO 74
	}
	case 75:
		//line agora.y:509
		{
			yyVAL.item = yyS[yypt-0].item //TODO 75
	}
	case 76:
		//line agora.y:513
		{
			yyVAL.item = yyS[yypt-0].item //TODO 76
	}
	case 77:
		//line agora.y:519
		{
			_parserResult = yyS[yypt-0].item //TODO 77
	}
	case 78:
		//line agora.y:525
		{
			yyVAL.item = yyS[yypt-0].item //TODO 78
	}
	case 79:
		//line agora.y:531
		{
			yyVAL.item = yyS[yypt-0].item //TODO 79
	}
	case 80:
		//line agora.y:535
		{
			yyVAL.item = []UnaryExpr{yyS[yypt-1].item, yyS[yypt-0].item} //TODO 80
	}
	case 81:
		//line agora.y:541
		{
			yyVAL.item = yyS[yypt-0].item //TODO 81
	}
	case 82:
		//line agora.y:545
		{
			yyVAL.item = yyS[yypt-0].item //TODO 82
	}
	}
	goto yystack /* stack new state and value */
}
